{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"1. Turunan Numerik Pendahuluan Sebelum mempelajari materi turunan numerik, kita harus mengenal definisi metode numerik terlebih dahulu. Metode numerik ialah teknik penyelesaian yang dirancang secara matematis dan efisien menggunakan operasi hitung (aritmatik). Keuntungan Keuntungan dari metode ini antara lain: Selalu ada solusi dari suatu permasalahannya. Hasil perhitungan lebih akurat dan cepat karena dekat dengan nilai sesungguhnya. Proses hasil perhitungan dapat disimulasikan dan ditampilkan Kelemahan Adapun kelemahan metode ini antara lain: Hasil perhitungan adalah nilai yang diperoleh dari pendekatan atau hampiran. Proses perhitungan akan berlangsung lama dan berulang-ulang,jika tanpa bantuan komputer. Profil Penulis NAMA : VENIA ANISYA RAKHMANDA NIM : 190411100114 KELAS : KOMPUTASI NUMERIK 4C DOSEN PENGAMPU : MULA'AB, S.Si., M.Kom","title":"1. Turunan Numerik"},{"location":"#1-turunan-numerik","text":"","title":"1. Turunan Numerik"},{"location":"#pendahuluan","text":"Sebelum mempelajari materi turunan numerik, kita harus mengenal definisi metode numerik terlebih dahulu. Metode numerik ialah teknik penyelesaian yang dirancang secara matematis dan efisien menggunakan operasi hitung (aritmatik).","title":"Pendahuluan"},{"location":"#keuntungan","text":"Keuntungan dari metode ini antara lain: Selalu ada solusi dari suatu permasalahannya. Hasil perhitungan lebih akurat dan cepat karena dekat dengan nilai sesungguhnya. Proses hasil perhitungan dapat disimulasikan dan ditampilkan","title":"Keuntungan"},{"location":"#kelemahan","text":"Adapun kelemahan metode ini antara lain: Hasil perhitungan adalah nilai yang diperoleh dari pendekatan atau hampiran. Proses perhitungan akan berlangsung lama dan berulang-ulang,jika tanpa bantuan komputer.","title":"Kelemahan"},{"location":"#profil-penulis","text":"NAMA : VENIA ANISYA RAKHMANDA NIM : 190411100114 KELAS : KOMPUTASI NUMERIK 4C DOSEN PENGAMPU : MULA'AB, S.Si., M.Kom","title":"Profil Penulis"},{"location":"1.1%20Teori/","text":"A. DEFINISI TURUNAN NUMERIK Turunan merupakan bagian dari konsep limit fungsi. Turunan atau deferensial adalah nilai ukur terhadap perubahan nilai input(masukan). Menggunakan perpaduan konsep limit fungsi yang pernah dipelajari sebelumnya,turunan dapat didefinisikan sebagai : $$f\\left( x\\right) =\\lim _{h\\rightarrow 0}\\dfrac{f\\left( x+h\\right) -f\\left( x\\right) }{h}$$ Turunan numerik adalah menentukan nilai yang mendekati suatu nilai fungsi tertentu yang dikemas dalam bentuk tabel. B. KONSEP TURUNAN NUMERIK Tiga konsep pendekatan dalam sistem perhitungan turunan numerik: Konsep hampiran selisih maju Konsep hampiran selisih mundur Konsep hampiran selisih pusat C. TURUNAN RUMUS Tiga konsep pendekatan diatas dapat diturunkan dengan rumus : (Keduanya akan menghasilkan rumus yg sama) Deret taylor Hampiran polinom interpolasi D. PENERAPAN DALAM KEHIDUPAN Penerapan konsep/ilmu turunan numerik dlm kehidupan sehari-hari yaitu: Dalam pengolahan citra Menghitung luas wilayah yang tidak beraturan Menentukan nilai maksimum dan minimum Menentukan kecepatan dan percepatan benda Digunakan dalam konstruksi bangunan","title":"1.1 Teori"},{"location":"1.1%20Teori/#a-definisi-turunan-numerik","text":"Turunan merupakan bagian dari konsep limit fungsi. Turunan atau deferensial adalah nilai ukur terhadap perubahan nilai input(masukan). Menggunakan perpaduan konsep limit fungsi yang pernah dipelajari sebelumnya,turunan dapat didefinisikan sebagai : $$f\\left( x\\right) =\\lim _{h\\rightarrow 0}\\dfrac{f\\left( x+h\\right) -f\\left( x\\right) }{h}$$ Turunan numerik adalah menentukan nilai yang mendekati suatu nilai fungsi tertentu yang dikemas dalam bentuk tabel.","title":"A. DEFINISI TURUNAN NUMERIK"},{"location":"1.1%20Teori/#b-konsep-turunan-numerik","text":"Tiga konsep pendekatan dalam sistem perhitungan turunan numerik: Konsep hampiran selisih maju Konsep hampiran selisih mundur Konsep hampiran selisih pusat","title":"B. KONSEP TURUNAN NUMERIK"},{"location":"1.1%20Teori/#c-turunan-rumus","text":"Tiga konsep pendekatan diatas dapat diturunkan dengan rumus : (Keduanya akan menghasilkan rumus yg sama) Deret taylor Hampiran polinom interpolasi","title":"C. TURUNAN RUMUS"},{"location":"1.1%20Teori/#d-penerapan-dalam-kehidupan","text":"Penerapan konsep/ilmu turunan numerik dlm kehidupan sehari-hari yaitu: Dalam pengolahan citra Menghitung luas wilayah yang tidak beraturan Menentukan nilai maksimum dan minimum Menentukan kecepatan dan percepatan benda Digunakan dalam konstruksi bangunan","title":"D. PENERAPAN DALAM KEHIDUPAN"},{"location":"1.2%20Algoritma/","text":"A. Konsep Pendekatan Turunan Numerik 1.Konsep hampiran selisih maju $$f'\\left( x_{0}\\right) =\\dfrac{f\\left( x_{0}+h\\right) -f\\left( x_{0}\\right) }{h}=\\dfrac{f_{1}-f_{0}}{h}$$ 2.Konsep hampiran selisih mundur $$f'\\left( x_{0}\\right) =\\dfrac{f\\left( x_{0}\\right) -f\\left( x_{0}-h\\right) }{h}=\\dfrac{f_{0}-f_{1}}{h} $$ 3.Konsep hampiran selisih pusat $$f'\\left( x_{0}\\right) =\\dfrac{f\\left( x_{0}+h\\right) -f\\left( x_{0}-h\\right) }{2h}=\\dfrac{f_{1}-f_{-1}}{2h}$$ B. Penurunan Rumus Dengan Deret Taylor 1.Konsep hampiran selisih maju Pada nilai-nilai f di x0 dan x1 persamaan rumusnya menjadi: $$fo'=\\dfrac{f_{1}-f_{0}}{h}+O\\left( h\\right)$$ yang dalam hal ini $$O\\left( h\\right) =h/2f''\\left( t\\right) ,x_{i} <t <x_{i+1} $$ 2.Konsep hampiran selisih mundur Pada nilai-nilai f di x0 dan x-1 persamaan rumusnya menjadi: $$fo'=\\dfrac{f_{0}-f_{-1}}{h}+O\\left( h\\right)$$ yang dalam hal ini $$O\\left( h\\right) =-h/2f''\\left( t\\right) , x_{i+1}<t <x_{i} $$ 3.Konsep hampiran selisih pusat Pada nilai-nilai f di x-1 dan x1 persamaan rumusnya menjadi: $$fo'=\\dfrac{f_{1}-f_{-1}}{2h}+O\\left( h^{2}\\right)$$ yang dalam hal ini $$O\\left( h^{2}\\right) =-h/6f'''\\left( t\\right) , x_{i-1}<t <x_{i+1} $$ C. Penurunan Rumus Dengan Polinom Interpolasi 1.Konsep hampiran selisih maju Apabila digunakan titik-titik x0,x1,x2: $$f'\\left( x_{0}\\right) =-\\dfrac{3f_{0}+4f_{1}-f_{2}}{2h}$$ 2.Konsep hampiran selisih mundur Apabila digunakan titik-titik x0 dan x-1: $$f'\\left( x_{0}\\right) =1/h\\left( \\nabla f\\circ \\right) =\\dfrac{f_{0}-f_{-1}}{h}$$ 3.Konsep hampiran selisih pusat Pada titik x-1, x0, dan x1: $$f'\\left( x_{0}\\right) =\\dfrac{f_{1}-f_{-1}}{2h}$$","title":"1.2 Algoritma"},{"location":"1.2%20Algoritma/#a-konsep-pendekatan-turunan-numerik","text":"1.Konsep hampiran selisih maju $$f'\\left( x_{0}\\right) =\\dfrac{f\\left( x_{0}+h\\right) -f\\left( x_{0}\\right) }{h}=\\dfrac{f_{1}-f_{0}}{h}$$ 2.Konsep hampiran selisih mundur $$f'\\left( x_{0}\\right) =\\dfrac{f\\left( x_{0}\\right) -f\\left( x_{0}-h\\right) }{h}=\\dfrac{f_{0}-f_{1}}{h} $$ 3.Konsep hampiran selisih pusat $$f'\\left( x_{0}\\right) =\\dfrac{f\\left( x_{0}+h\\right) -f\\left( x_{0}-h\\right) }{2h}=\\dfrac{f_{1}-f_{-1}}{2h}$$","title":"A. Konsep Pendekatan Turunan Numerik"},{"location":"1.2%20Algoritma/#b-penurunan-rumus-dengan-deret-taylor","text":"1.Konsep hampiran selisih maju Pada nilai-nilai f di x0 dan x1 persamaan rumusnya menjadi: $$fo'=\\dfrac{f_{1}-f_{0}}{h}+O\\left( h\\right)$$ yang dalam hal ini $$O\\left( h\\right) =h/2f''\\left( t\\right) ,x_{i} <t <x_{i+1} $$ 2.Konsep hampiran selisih mundur Pada nilai-nilai f di x0 dan x-1 persamaan rumusnya menjadi: $$fo'=\\dfrac{f_{0}-f_{-1}}{h}+O\\left( h\\right)$$ yang dalam hal ini $$O\\left( h\\right) =-h/2f''\\left( t\\right) , x_{i+1}<t <x_{i} $$ 3.Konsep hampiran selisih pusat Pada nilai-nilai f di x-1 dan x1 persamaan rumusnya menjadi: $$fo'=\\dfrac{f_{1}-f_{-1}}{2h}+O\\left( h^{2}\\right)$$ yang dalam hal ini $$O\\left( h^{2}\\right) =-h/6f'''\\left( t\\right) , x_{i-1}<t <x_{i+1} $$","title":"B. Penurunan Rumus Dengan Deret Taylor"},{"location":"1.2%20Algoritma/#c-penurunan-rumus-dengan-polinom-interpolasi","text":"1.Konsep hampiran selisih maju Apabila digunakan titik-titik x0,x1,x2: $$f'\\left( x_{0}\\right) =-\\dfrac{3f_{0}+4f_{1}-f_{2}}{2h}$$ 2.Konsep hampiran selisih mundur Apabila digunakan titik-titik x0 dan x-1: $$f'\\left( x_{0}\\right) =1/h\\left( \\nabla f\\circ \\right) =\\dfrac{f_{0}-f_{-1}}{h}$$ 3.Konsep hampiran selisih pusat Pada titik x-1, x0, dan x1: $$f'\\left( x_{0}\\right) =\\dfrac{f_{1}-f_{-1}}{2h}$$","title":"C. Penurunan Rumus Dengan Polinom Interpolasi"},{"location":"1.3%20Coding/","text":"Program Python Turunan Numerik import numpy as np import matplotlib.pyplot as plt def func(x,A,B): return A*x**2+B*x xlist = np.linspace(0,10,100) ylist = func(xlist,2,1.4) plt.figure(1,dpi=120) plt.plot(xlist,ylist,label=\"Function\") def D(xlist,ylist): yprime = np.diff(ylist)/np.diff(xlist) xprime=[] for i in range(len(yprime)): xtemp = (xlist[i+1]+xlist[i])/2 xprime = np.append(xprime,xtemp) return xprime, yprime xprime, yprime = D(xlist,ylist) plt.plot(xprime,yprime,label=\"Derivative\") xprime2, yprime2 = D(xprime,yprime) plt.plot(xprime2,yprime2,label=\"2nd Derivative\") plt.legend()","title":"1.3 Coding"},{"location":"1.3%20Coding/#program-python-turunan-numerik","text":"import numpy as np import matplotlib.pyplot as plt def func(x,A,B): return A*x**2+B*x xlist = np.linspace(0,10,100) ylist = func(xlist,2,1.4) plt.figure(1,dpi=120) plt.plot(xlist,ylist,label=\"Function\") def D(xlist,ylist): yprime = np.diff(ylist)/np.diff(xlist) xprime=[] for i in range(len(yprime)): xtemp = (xlist[i+1]+xlist[i])/2 xprime = np.append(xprime,xtemp) return xprime, yprime xprime, yprime = D(xlist,ylist) plt.plot(xprime,yprime,label=\"Derivative\") xprime2, yprime2 = D(xprime,yprime) plt.plot(xprime2,yprime2,label=\"2nd Derivative\") plt.legend()","title":"Program Python Turunan Numerik"},{"location":"2.%20Persamaan%20Deferensial%20Biasa/","text":"2. Persamaan Deferensial Biasa Pendahuluan Sebelum mempelajari materi persamaan deferensial biasa, kita harus mengenal definisi persamaan deferensial terlebih dahulu. Persamaan diferensial adalah persamaan matematis untuk fungsi satu variabel / lebih, yang dapat menghubungkan nilai fungsi itu sendiri dan turunannya dalam berbagai orde. Persamaan diferensial ini memegang peranan penting dalam berbagai aspek kehidupan sehari-hari.","title":"2. Persamaan Deferensial Biasa"},{"location":"2.%20Persamaan%20Deferensial%20Biasa/#2-persamaan-deferensial-biasa","text":"","title":"2. Persamaan Deferensial Biasa"},{"location":"2.%20Persamaan%20Deferensial%20Biasa/#pendahuluan","text":"Sebelum mempelajari materi persamaan deferensial biasa, kita harus mengenal definisi persamaan deferensial terlebih dahulu. Persamaan diferensial adalah persamaan matematis untuk fungsi satu variabel / lebih, yang dapat menghubungkan nilai fungsi itu sendiri dan turunannya dalam berbagai orde. Persamaan diferensial ini memegang peranan penting dalam berbagai aspek kehidupan sehari-hari.","title":"Pendahuluan"},{"location":"2.1%20Teori/","text":"A. INITIAL VALUE PROBLEMS Initial value problems adalah suatu permasalahan yang sering kali ditemukan pada suatu proses dekomposisi zat kimia atau polutan dalam suatu reaktor Dengan tidak tersedianya informasi yang cukup untuk menyelesaikannya, hal ini mempersulit penyelesaian dari suatu persamaan deferensial tersebut. Untuk menyelesaikan beberapa permasalahan pada suatu persamaan deferensial ini, terdapat beberapa metode yang dapat dilakukan: Metode Euler Metode Heun Metode Titik Tengah Metode Runge-Kutta Orde 4 Metode multistep linier B. DEFINISI PERSAMAAN DEFERENSIAL BIASA Persamaan diferensial biasa adalah persamaan yang dapat memuat satu atau lebih turunan fungsi satu peubah bebas yang belum diketahui. Persamaan deferensial parsial adalah fungsi yang terdiri dari lebih dari satu peubah bebas. C. SOLUSI Fungsi y = f(x) disebut solusi jika fungsi tersebut disubtitusikan ke PDB menghasilkan kesamaan yang berlaku untuk semua nilai x (akan diperoleh persamaan identitas) Solusi Umum dan Solusi Khusus Apabila fungsi y = f(x) memuat konstanta sembarang, maka solusi disebut solusi umum, apabila sebaliknya disebut solusi khusus. D. PERSAMAAN DEFERENSIAL BIASA ORDE 1 1.Variabel terpisah Bentuk umum persamaan deferensial biasa dengan variabel terpisah : $$g\\left( y\\right) dy=f\\left( x\\right) dx$$ Untuk cara penyelesaian yaitu dengan integralkan kedua ruas : $$\\int g\\left( y\\right) dy=\\int f\\left( x\\right) dx$$ 2.Koefisien fungsi homogen Fungsi homogen Fungsi A(x,y) disebut fungsi homogen dengan derajat n, apabila pada A(kx,ky) = kA(x,y), k konstanta sembarang. Persamaan deferensial biasa yg dapat dituliskan dalam bentuk : $$y'=\\dfrac{A\\left( x,y\\right) }{B\\left( x,y\\right) }$$ Dengan A,B fungsi homogen dengan derajat yang sama disebut persamaan deferensial biasa dengan koefisien fungsi homogen. Untuk cara penyelesaian yaitu dengan menggunakan substitusi y = ux, u = u(x) : $$y'=u'x+u$$ $$\\dfrac{dy}{dx}=x\\dfrac{du}{dx}+u$$ $$dy=xdu+udx$$ 3.Linier Persamaan deferensial biasa orde satu disebut linier, apabila dapat ditulis dalam bentuk : Untuk cara penyelesaian yaitu dengan kalikan dengan faktor integral $$e^ {\\int P\\left( x\\right) dx}$$ Setelah itu integralkan kedua ruas terhadap x : $$ye^{\\int P\\left( x\\right) dx}=\\int e^{\\int p\\left( x\\right) dx}r\\left( x\\right) dx+C$$ E. TRAYEKTORI ORTOGONAL Trayektori ortogonal adalah keluarga kurva yang ortogonal / tegak lurus terhadap keluarga kurva lain. Cara untuk mendapatkan trayektori ortogonal dari suatu kurva adalah sebagai berikut : 1.Turunkan srcara implisit f(x,y) = c terhadap x, nyatakan parameter c dalam x dan y. 2.Karena tegak lurus maka trayektori ortogonal (TO) harus memenuhi : $$y'=-\\dfrac{1}{Dxf\\left( x,y\\right) }$$ TO akan didapatkan dengan mencari solusi dari fungsi tersebut F. PERSAMAAN DEFERENSIAL BIASA ORDE 2 Bentuk Umum : $$s\\left( x\\right) y''+p\\left( x\\right) y'+g\\left( x\\right) y=r\\left( x\\right)$$ s(x),p(x),g(x) disebut koefisien Apabila r(x) = 0, maka Persamaan Deferensial tersebut disebut homogen, apabila sebaliknya disebut non homogen. 1.Persamaan Deferensial Biasa Orde Dua Homogen dengan Koefisien Konstan Bentuk Umum : $$ay''+by'+cy=0$$ Dimana a, b, c konstanta sembarang. Solusi Umum : - Apabila y1 dan y2 solusi PD (i) dan y1,y2 bebas linier, maka y1 dan y2 disebut solusi basis PD (i). - y1,y2 disebut bebas linier apabila : $$W=\\begin{vmatrix} y_{1} & y_{2} \\\\ y_{1}' & y_{2}' \\end{vmatrix}$$ Apabila y1, y2 solusi basis, maka Solusi Umum PD (i) disebut Solusi Homogen, yaitu : $$y=C_{1}y_{1},+C_{2}y_{2}$$ C1, C2 konstanta. 2.Persamaan Deferensial Biasa Orde Dua Non Homogen dengan Koefisien Konstan Bentuk Umum : $$ay''+by'+cy=0$$ dengan $$r\\left( x\\right) \\neq 0$$ Solusi total : $$y=y_{h}+y_{p}$$ Dimana yh = solusi Persamaan Deferensial homogen, yp = solusi Persamaan Deferensial non homogen Menentukan yp : 1.Metoda koefisien tak tentu Pilih yp yang sesuai dengan r(x), substitusikan ke Persamaan Deferensial. a. Kasus khusus b. Apabila r(x) merupakan solusi basis PD homogen, maka kalikan yp dengan x (atau x2, jika akar PK PD Homogen kembar) c. Apabila r(x) merupakan penjumlahan drai 2 bentuk pada kasus a), maka yp juga merupakan jumlah 2 bentuk yp yang bersesuaian. 2.Metoda variasi parameter Metoda ini digunakan untuk memecahkan persamaan yang tidak dapat diselesaikan dengan metode koefisien tak tentu. $$y''+by'+cy=r(x)$$","title":"2.1 Teori"},{"location":"2.1%20Teori/#a-initial-value-problems","text":"Initial value problems adalah suatu permasalahan yang sering kali ditemukan pada suatu proses dekomposisi zat kimia atau polutan dalam suatu reaktor Dengan tidak tersedianya informasi yang cukup untuk menyelesaikannya, hal ini mempersulit penyelesaian dari suatu persamaan deferensial tersebut. Untuk menyelesaikan beberapa permasalahan pada suatu persamaan deferensial ini, terdapat beberapa metode yang dapat dilakukan: Metode Euler Metode Heun Metode Titik Tengah Metode Runge-Kutta Orde 4 Metode multistep linier","title":"A. INITIAL VALUE PROBLEMS"},{"location":"2.1%20Teori/#b-definisi-persamaan-deferensial-biasa","text":"Persamaan diferensial biasa adalah persamaan yang dapat memuat satu atau lebih turunan fungsi satu peubah bebas yang belum diketahui. Persamaan deferensial parsial adalah fungsi yang terdiri dari lebih dari satu peubah bebas.","title":"B. DEFINISI PERSAMAAN DEFERENSIAL BIASA"},{"location":"2.1%20Teori/#c-solusi","text":"Fungsi y = f(x) disebut solusi jika fungsi tersebut disubtitusikan ke PDB menghasilkan kesamaan yang berlaku untuk semua nilai x (akan diperoleh persamaan identitas) Solusi Umum dan Solusi Khusus Apabila fungsi y = f(x) memuat konstanta sembarang, maka solusi disebut solusi umum, apabila sebaliknya disebut solusi khusus.","title":"C. SOLUSI"},{"location":"2.1%20Teori/#d-persamaan-deferensial-biasa-orde-1","text":"1.Variabel terpisah Bentuk umum persamaan deferensial biasa dengan variabel terpisah : $$g\\left( y\\right) dy=f\\left( x\\right) dx$$ Untuk cara penyelesaian yaitu dengan integralkan kedua ruas : $$\\int g\\left( y\\right) dy=\\int f\\left( x\\right) dx$$ 2.Koefisien fungsi homogen Fungsi homogen Fungsi A(x,y) disebut fungsi homogen dengan derajat n, apabila pada A(kx,ky) = kA(x,y), k konstanta sembarang. Persamaan deferensial biasa yg dapat dituliskan dalam bentuk : $$y'=\\dfrac{A\\left( x,y\\right) }{B\\left( x,y\\right) }$$ Dengan A,B fungsi homogen dengan derajat yang sama disebut persamaan deferensial biasa dengan koefisien fungsi homogen. Untuk cara penyelesaian yaitu dengan menggunakan substitusi y = ux, u = u(x) : $$y'=u'x+u$$ $$\\dfrac{dy}{dx}=x\\dfrac{du}{dx}+u$$ $$dy=xdu+udx$$ 3.Linier Persamaan deferensial biasa orde satu disebut linier, apabila dapat ditulis dalam bentuk : Untuk cara penyelesaian yaitu dengan kalikan dengan faktor integral $$e^ {\\int P\\left( x\\right) dx}$$ Setelah itu integralkan kedua ruas terhadap x : $$ye^{\\int P\\left( x\\right) dx}=\\int e^{\\int p\\left( x\\right) dx}r\\left( x\\right) dx+C$$","title":"D. PERSAMAAN DEFERENSIAL BIASA ORDE 1"},{"location":"2.1%20Teori/#e-trayektori-ortogonal","text":"Trayektori ortogonal adalah keluarga kurva yang ortogonal / tegak lurus terhadap keluarga kurva lain. Cara untuk mendapatkan trayektori ortogonal dari suatu kurva adalah sebagai berikut : 1.Turunkan srcara implisit f(x,y) = c terhadap x, nyatakan parameter c dalam x dan y. 2.Karena tegak lurus maka trayektori ortogonal (TO) harus memenuhi : $$y'=-\\dfrac{1}{Dxf\\left( x,y\\right) }$$ TO akan didapatkan dengan mencari solusi dari fungsi tersebut","title":"E. TRAYEKTORI ORTOGONAL"},{"location":"2.1%20Teori/#f-persamaan-deferensial-biasa-orde-2","text":"Bentuk Umum : $$s\\left( x\\right) y''+p\\left( x\\right) y'+g\\left( x\\right) y=r\\left( x\\right)$$ s(x),p(x),g(x) disebut koefisien Apabila r(x) = 0, maka Persamaan Deferensial tersebut disebut homogen, apabila sebaliknya disebut non homogen. 1.Persamaan Deferensial Biasa Orde Dua Homogen dengan Koefisien Konstan Bentuk Umum : $$ay''+by'+cy=0$$ Dimana a, b, c konstanta sembarang. Solusi Umum : - Apabila y1 dan y2 solusi PD (i) dan y1,y2 bebas linier, maka y1 dan y2 disebut solusi basis PD (i). - y1,y2 disebut bebas linier apabila : $$W=\\begin{vmatrix} y_{1} & y_{2} \\\\ y_{1}' & y_{2}' \\end{vmatrix}$$ Apabila y1, y2 solusi basis, maka Solusi Umum PD (i) disebut Solusi Homogen, yaitu : $$y=C_{1}y_{1},+C_{2}y_{2}$$ C1, C2 konstanta. 2.Persamaan Deferensial Biasa Orde Dua Non Homogen dengan Koefisien Konstan Bentuk Umum : $$ay''+by'+cy=0$$ dengan $$r\\left( x\\right) \\neq 0$$ Solusi total : $$y=y_{h}+y_{p}$$ Dimana yh = solusi Persamaan Deferensial homogen, yp = solusi Persamaan Deferensial non homogen","title":"F. PERSAMAAN DEFERENSIAL BIASA ORDE 2"},{"location":"2.1%20Teori/#menentukan-yp","text":"1.Metoda koefisien tak tentu Pilih yp yang sesuai dengan r(x), substitusikan ke Persamaan Deferensial. a. Kasus khusus b. Apabila r(x) merupakan solusi basis PD homogen, maka kalikan yp dengan x (atau x2, jika akar PK PD Homogen kembar) c. Apabila r(x) merupakan penjumlahan drai 2 bentuk pada kasus a), maka yp juga merupakan jumlah 2 bentuk yp yang bersesuaian. 2.Metoda variasi parameter Metoda ini digunakan untuk memecahkan persamaan yang tidak dapat diselesaikan dengan metode koefisien tak tentu. $$y''+by'+cy=r(x)$$","title":"Menentukan yp :"},{"location":"2.2%20Algoritma/","text":"A. Metode Penyelesaian Initial Value Problems Persamaan Deferensial Biasa 1.Metode Euler Metode Euler adalah metode yang paling sederhana yang diturunkan dari deret Taylor. Penyelesaian initial value problems menggunakan metode Euler dilakukan melalui Persamaan : $$yi+1=yi+f\\left( xi,yi\\right) h$$ dimana i merupakan tahapan iterasi. Algoritma Metode Euler : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan integrasi menggunakan persamaan diatas. 2.Metode Heun Metode Heun adalah salah satu peningkatan dari metode Euler. Metode ini melibatkan 2 buah persamaan. Persamaan pertama disebut sebagai persamaan prediktor yang digunakan untuk memprediksi nilai integrasi awal. $$y_{i+1}^{0}=yi+f\\left( x_{i},yi\\right) h$$ Persamaan (10.2). $$y_{i+1}=y_{i}+\\dfrac{f\\left( xi,yi\\right) +f\\begin{pmatrix} \\\\ x_{i+1},y_{i+1}^{0} \\end{pmatrix}}{2}h$$ Persamaan (10.3). Algoritma Metode Heun : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan prediksi nilai awal dengan Persamaan (10.2). 4.Lakukan koreksi nilai awal menggunakan Persamaan (10.3). 5.Lakukan koreksi terhadap nilai koreksi yang dihasilkan sebelumnya menggunakan Persamaan (10.3). 3.Metode Titik Tengah Metode titik tengah adalah metode yang menggunakan setengah step size pada metode Euler untuk melakukan estimasi terhadap integral suatu persamaan diferensial. Metode ini melakukan perhitungan melalui dua tahapan yaitu: menghitung nilai estimasi integral pada setengah step size dan menghitung nilai integral menggunkan hasil perhitungan setengah step size sebelumnya. $$y_{{i+\\dfrac{1}{2}}}=y_{i}+f\\left( x_{i},y_{i}\\right) \\dfrac{h}{2}$$ Persamaan (10.4). $$y_{i+1}=y_{i}+f\\left( x_{i}+\\dfrac{1}{2},y_{i},\\dfrac{1}{2}\\right) h$$ Persamaan (10.5). Algoritma Metode Tengah : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan integrasi pada setengah tahapan iterasi menggunakan Persamaan (10.4). 4.Lakukan iterasi pada setengah tahapan selanjutnya menggunakan Persamaan (10.5). 4.Metode Runge-Kutta Orde 4 Runge-Kutta orde 4 adalah metode yang paling sering digunakan dalam penyelesaian persamaan diferensial. Metode ini dapat memperoleh akurasi deret Taylor tanpa memerlukan diferensiasi orde yang lebih tinggi. $$y_{i+1}=y_{i}+\\dfrac{1}{6}\\left( k_{1}+2k_{2}+2k_{3}+k_{4}\\right) h$$ Persamaan (10.6). Algoritma Runge-Kutta Orde 4 : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan integrasi menggunakan Persamaan (10.6). 5.Metode Multistep Linier Metode multistep linier adalah metode yang dikembangkan untuk mengatasi masalah jika kita dapat menggunakan kembali perkiraan sebelumnya, kita dapat memperoleh akurasi tambahan tanpa menimbulkan penalti kinerja yang terkait dengan evaluasi fungsi tambahan. $$y_{i+2}=y_{i+1}+\\dfrac{h}{2}\\left( 3f\\left( x_{i+1},y_{i+1}\\right) -f\\left( x_{i},y_{i}\\right) \\right)$$ Persamaan (10.11). Algoritma Multistep Linier : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan pendekatan pada iterasi ke-1 menggunakan metode Euler. 4.Lakukan integrasi ke-2 sampai n menggunakan Persamaan (10.11). 6.Metode Deret Taylor Problem yang akan diselesaikan menggunakan metode deret Taylor adalah persamaan deferensial biasa orde satu : $$\\dfrac{dy\\left( x\\right) }{dx}=f\\left( x,y\\right) ,y\\left( x_{0}\\right) =y_{0}$$ Estimasi pada beberapa titik : $$y\\left( x_{0}+h\\right), y\\left( x_{0}+2h\\right), y\\left( x_{0}+3h\\right),...$$ Dihitung dengan menggunakan pemotongan expansi deret Taylor. Algoritma Deret Taylor : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Tentukan turunan-turunan yang diperlukan untuk menyelesaikan permasalahan . 4.Hasil dari perhitungan 7.Metode Deret MacLaurin Deret MacLaurin adalah metode yang masih berhubungan erat dengan Deret Taylor. Deret MacLaurin merupakan kasus khusus dari deret Taylor, yaitu deret Taylor dengan fungsi yang di ekspansi di sekitar c = 0. Deret Maclaurin disebut juga sebagai Deret Taylor Baku. Formula deret Maclaurin : $$f\\left( x\\right) =f\\left( 0\\right) +\\dfrac{f'\\left( 0\\right) }{1!}x+\\dfrac{f''\\left( 0\\right) }{2!}x^{2}+\\dfrac{f'''\\left( 0\\right) }{3!}x^{3}+\\ldots$$ Algoritma Deret MacLaurin (sama seperti deret Taylor): 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Tentukan turunan-turunan yang diperlukan untuk menyelesaikan permasalahan . 4.Hasil dari perhitungan","title":"2.2 Algoritma"},{"location":"2.2%20Algoritma/#a-metode-penyelesaian-initial-value-problems-persamaan-deferensial-biasa","text":"","title":"A. Metode Penyelesaian Initial Value Problems Persamaan Deferensial Biasa"},{"location":"2.2%20Algoritma/#1metode-euler","text":"Metode Euler adalah metode yang paling sederhana yang diturunkan dari deret Taylor. Penyelesaian initial value problems menggunakan metode Euler dilakukan melalui Persamaan : $$yi+1=yi+f\\left( xi,yi\\right) h$$ dimana i merupakan tahapan iterasi. Algoritma Metode Euler : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan integrasi menggunakan persamaan diatas.","title":"1.Metode Euler"},{"location":"2.2%20Algoritma/#2metode-heun","text":"Metode Heun adalah salah satu peningkatan dari metode Euler. Metode ini melibatkan 2 buah persamaan. Persamaan pertama disebut sebagai persamaan prediktor yang digunakan untuk memprediksi nilai integrasi awal. $$y_{i+1}^{0}=yi+f\\left( x_{i},yi\\right) h$$ Persamaan (10.2). $$y_{i+1}=y_{i}+\\dfrac{f\\left( xi,yi\\right) +f\\begin{pmatrix} \\\\ x_{i+1},y_{i+1}^{0} \\end{pmatrix}}{2}h$$ Persamaan (10.3). Algoritma Metode Heun : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan prediksi nilai awal dengan Persamaan (10.2). 4.Lakukan koreksi nilai awal menggunakan Persamaan (10.3). 5.Lakukan koreksi terhadap nilai koreksi yang dihasilkan sebelumnya menggunakan Persamaan (10.3).","title":"2.Metode Heun"},{"location":"2.2%20Algoritma/#3metode-titik-tengah","text":"Metode titik tengah adalah metode yang menggunakan setengah step size pada metode Euler untuk melakukan estimasi terhadap integral suatu persamaan diferensial. Metode ini melakukan perhitungan melalui dua tahapan yaitu: menghitung nilai estimasi integral pada setengah step size dan menghitung nilai integral menggunkan hasil perhitungan setengah step size sebelumnya. $$y_{{i+\\dfrac{1}{2}}}=y_{i}+f\\left( x_{i},y_{i}\\right) \\dfrac{h}{2}$$ Persamaan (10.4). $$y_{i+1}=y_{i}+f\\left( x_{i}+\\dfrac{1}{2},y_{i},\\dfrac{1}{2}\\right) h$$ Persamaan (10.5). Algoritma Metode Tengah : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan integrasi pada setengah tahapan iterasi menggunakan Persamaan (10.4). 4.Lakukan iterasi pada setengah tahapan selanjutnya menggunakan Persamaan (10.5).","title":"3.Metode Titik Tengah"},{"location":"2.2%20Algoritma/#4metode-runge-kutta-orde-4","text":"Runge-Kutta orde 4 adalah metode yang paling sering digunakan dalam penyelesaian persamaan diferensial. Metode ini dapat memperoleh akurasi deret Taylor tanpa memerlukan diferensiasi orde yang lebih tinggi. $$y_{i+1}=y_{i}+\\dfrac{1}{6}\\left( k_{1}+2k_{2}+2k_{3}+k_{4}\\right) h$$ Persamaan (10.6). Algoritma Runge-Kutta Orde 4 : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan integrasi menggunakan Persamaan (10.6).","title":"4.Metode Runge-Kutta Orde 4"},{"location":"2.2%20Algoritma/#5metode-multistep-linier","text":"Metode multistep linier adalah metode yang dikembangkan untuk mengatasi masalah jika kita dapat menggunakan kembali perkiraan sebelumnya, kita dapat memperoleh akurasi tambahan tanpa menimbulkan penalti kinerja yang terkait dengan evaluasi fungsi tambahan. $$y_{i+2}=y_{i+1}+\\dfrac{h}{2}\\left( 3f\\left( x_{i+1},y_{i+1}\\right) -f\\left( x_{i},y_{i}\\right) \\right)$$ Persamaan (10.11). Algoritma Multistep Linier : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Lakukan pendekatan pada iterasi ke-1 menggunakan metode Euler. 4.Lakukan integrasi ke-2 sampai n menggunakan Persamaan (10.11).","title":"5.Metode Multistep Linier"},{"location":"2.2%20Algoritma/#6metode-deret-taylor","text":"Problem yang akan diselesaikan menggunakan metode deret Taylor adalah persamaan deferensial biasa orde satu : $$\\dfrac{dy\\left( x\\right) }{dx}=f\\left( x,y\\right) ,y\\left( x_{0}\\right) =y_{0}$$ Estimasi pada beberapa titik : $$y\\left( x_{0}+h\\right), y\\left( x_{0}+2h\\right), y\\left( x_{0}+3h\\right),...$$ Dihitung dengan menggunakan pemotongan expansi deret Taylor. Algoritma Deret Taylor : 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Tentukan turunan-turunan yang diperlukan untuk menyelesaikan permasalahan . 4.Hasil dari perhitungan","title":"6.Metode Deret Taylor"},{"location":"2.2%20Algoritma/#7metode-deret-maclaurin","text":"Deret MacLaurin adalah metode yang masih berhubungan erat dengan Deret Taylor. Deret MacLaurin merupakan kasus khusus dari deret Taylor, yaitu deret Taylor dengan fungsi yang di ekspansi di sekitar c = 0. Deret Maclaurin disebut juga sebagai Deret Taylor Baku. Formula deret Maclaurin : $$f\\left( x\\right) =f\\left( 0\\right) +\\dfrac{f'\\left( 0\\right) }{1!}x+\\dfrac{f''\\left( 0\\right) }{2!}x^{2}+\\dfrac{f'''\\left( 0\\right) }{3!}x^{3}+\\ldots$$ Algoritma Deret MacLaurin (sama seperti deret Taylor): 1.Tentukan titik awal integrasi x0 dan y0. 2.Tentukan jumlah iterasi n dan step size h yang digunakan. 3.Tentukan turunan-turunan yang diperlukan untuk menyelesaikan permasalahan . 4.Hasil dari perhitungan","title":"7.Metode Deret MacLaurin"},{"location":"2.3%20Coding/","text":"Program Python Deret MacLaurin Program untuk persamaan deferensial $$e^{x-\\cos \\left( x\\right) }$$ sampai error yang dihasilkan kurang dari 0.001 untuk x=1 import numpy as np x = 1 e = 0 def f(x): return e**x - np.cos(x) a = np.zeros(40) b = np.zeros(40) c = np.zeros(40) a[0] = 1 b[0] = 8 c[0] = (a[0] + b[0])/2 for n in range(9): if f(a[n])*f(c[n])<0: a[n+1] = a[n] b[n+1] = c[n] else: a[n+1] = c[n] b[n+1] = b[n] c[n+1] = (a[n+1] + b[n+1])/2 print(c[n+1],f(c[n+1]))","title":"2.3 Coding"},{"location":"2.3%20Coding/#program-python-deret-maclaurin","text":"Program untuk persamaan deferensial $$e^{x-\\cos \\left( x\\right) }$$ sampai error yang dihasilkan kurang dari 0.001 untuk x=1 import numpy as np x = 1 e = 0 def f(x): return e**x - np.cos(x) a = np.zeros(40) b = np.zeros(40) c = np.zeros(40) a[0] = 1 b[0] = 8 c[0] = (a[0] + b[0])/2 for n in range(9): if f(a[n])*f(c[n])<0: a[n+1] = a[n] b[n+1] = c[n] else: a[n+1] = c[n] b[n+1] = b[n] c[n+1] = (a[n+1] + b[n+1])/2 print(c[n+1],f(c[n+1]))","title":"Program Python Deret MacLaurin"},{"location":"3.%20Sistem%20Persamaan%20Linier/","text":"3. Sistem Persamaan Linier Pendahuluan SEJARAH SINGKAT PERKEMBANGAN SISTEM PERSAMAAN LINIER Sebelum mempelajari materi sistem persamaan linier, sebaiknya kita mengetahui sejarah singkat dari materi ini. Dalam sejarah, perkembangan sistem persamaan linier sudah digunakan sejak 4000 tahun yang lalu (sekitar tahun 2000SM) pada masa Babylonian (Babel). Hal ini dapat dilihat dalam tablet YBC 4652 yang menjelaskan bagaimana Babel menyelesaikan suatu masalah dengan persamaan linier. Namun istilah \u201cSistem Persamaan Linier (Linear Equation)\u201d sendiri baru muncul sekitar abad ke-17 oleh seorang matematikawan Perancis bernama Rene Decartes. Tahun-tahun berikutnya baru bermunculan tokoh-tokoh seperti Gauss Paper(1811), Isaac Newton(1670), Carl Friedrich Gauss (1810), dan Wilhelm Jordan(1988).","title":"3. Sistem Persamaan Linier"},{"location":"3.%20Sistem%20Persamaan%20Linier/#3-sistem-persamaan-linier","text":"","title":"3. Sistem Persamaan Linier"},{"location":"3.%20Sistem%20Persamaan%20Linier/#pendahuluan","text":"SEJARAH SINGKAT PERKEMBANGAN SISTEM PERSAMAAN LINIER Sebelum mempelajari materi sistem persamaan linier, sebaiknya kita mengetahui sejarah singkat dari materi ini. Dalam sejarah, perkembangan sistem persamaan linier sudah digunakan sejak 4000 tahun yang lalu (sekitar tahun 2000SM) pada masa Babylonian (Babel). Hal ini dapat dilihat dalam tablet YBC 4652 yang menjelaskan bagaimana Babel menyelesaikan suatu masalah dengan persamaan linier. Namun istilah \u201cSistem Persamaan Linier (Linear Equation)\u201d sendiri baru muncul sekitar abad ke-17 oleh seorang matematikawan Perancis bernama Rene Decartes. Tahun-tahun berikutnya baru bermunculan tokoh-tokoh seperti Gauss Paper(1811), Isaac Newton(1670), Carl Friedrich Gauss (1810), dan Wilhelm Jordan(1988).","title":"Pendahuluan"},{"location":"3.1%20Teori/","text":"A. DEFINISI SISTEM PERSAMAAN LINIER Sistem persamaan linear ialah kumpulan persamaan linear yang dikorelasikan untuk membentuk suatu sistem. Sistem persamaannya bisa terdiri dari satu variabel, dua variabel atau lebih. Dalam bahasan ini, kita hanya membahas sistem persamaan linear dengan dua dan tiga variabel. B. SISTEM PERSAMAAN LINIER DUA VARIABEL (SPLDV) Sistem persamaan linear dua variabel ialah sistem persamaan linear yang terdiri dari dua persamaan dimana masing-masing persamaan memiliki dua variabel. Contoh SPLDV dengan variabel x dan y : $$\\begin{cases}ax+by=c\\\\ fx-gy=h\\end{cases}$$ dimana a,b,c,f,g dan h adalah bilangan-bilangan real. Penyelesaian SPLDV Tujuan penyelesaian ini untuk menentukan nilai yang memenuhi kedua persamaan yang ada pada SPLDV. Metode Penyelesaian : 1.Metode grafik Pada metode grafik ini, langkah-langkah yang dilakukan pertama adalah menentukan grafik garis dari masing-masing persamaan kemudian menentukan titik potong dari kedua garis. Titik potong dari kedua garis tersebut adalah penyelesaian dari SPLDV. Pada metode grafik ini, terdapat beberapa jenis himpunan penyelesaian berdasarkan grafik persamaan, yaitu: 1.Apabila kedua garis berpotongan, maka perpotonga kedua garis adalah penyelesaian dari SPLDV dan memiliki satu penyelesaian. 2.Apabila kedua garis sejajar, maka SPLDV tidak memiliki penyelesaian. 3.Apabila kedua garis saling berhimpit, maka SPLDV memiliki tak berhingga himpunan penyelesaian. 2.Metode eliminasi Pada metode eliminasi ini, menentukan penyelesaian dari variabel x dengan cara mengeliminasi variabel y, dan untuk menentukan penyelesaian variabel y dengan cara mengeliminasi variabel x. 3.Metode substitusi Pada metode substitusi, langkah pertama yang dilakukan adalah mengubah salah satu persamaan menjadi persamaan fungsi, yaitu x sebagai fungsi dari y atau y sebagai fungsi dari x. Kemudian subtitusikan x atau y pada persamaan yang lain. 4.Metode eliminasi-subtitusi Metode ini adalah gabungan dari metode eliminasi dan subtitusi. Pertama eliminasi salah satu variabel, kemudian penyelesaian dari variabel yang diperoleh disubtitusikan pada salah satu persamaan. C. SISTEM PERSAMAAN LINIER TIGA VARIABEL (SPLTV) Sistem persamaan linear tiga variabel adalah sistem persamaan yang terdiri dari tiga persamaan dimana masing-masing persamaan memiliki tiga variabel. Contoh SPLTV dengan variabel x,y, dan z: $$\\begin{cases}a_{1}x_{1}+b_{1}y_{1}+c_{1}z_{1}=d_{1}\\\\ a_{2}x_{2}+b_{2}y_{2}+c_{2}z_{2}=d_{2}\\\\ a_{3}x_{3}+b_{3}y_{3}+c_{3}z_{3}=d_{3}\\end{cases}$$ dimana a, b, c dan d adalah bilangan-bilangan real. Pada SPLTV terdapat 2 cara penyelesaian, yaitu : 1.Metode Subtitusi 1.Ubah salah satu persamaan yang ada pada sistem dan nyatakan x sebagai fungsi dari y dan z, atau y sebagai fungsi dari x dan z, atau z sebagai fungsi dari x dan y. 2.Subtitusikan fungsi x atau y atau z dari langkah pertama pada dua persamaan yang lain, sehingga diperoleh SPLDV. 3.Selesaikan SPLDV yang diperoleh dengan metode yang dibahas pada penyelesaian SPLDV di atas. 2.Metode Eliminasi 1.Eliminasi salah satu variabel sehingga diperoleh SPLDV 2.Selesaikan SPLDV yang diperoleh dengan langkah seperti pada penyelesaian SPLDV yang telah dibahas 3.Subtitusikan variabel yang telah diperoleh pada persamaan yang ada.","title":"3.1 Teori"},{"location":"3.1%20Teori/#a-definisi-sistem-persamaan-linier","text":"Sistem persamaan linear ialah kumpulan persamaan linear yang dikorelasikan untuk membentuk suatu sistem. Sistem persamaannya bisa terdiri dari satu variabel, dua variabel atau lebih. Dalam bahasan ini, kita hanya membahas sistem persamaan linear dengan dua dan tiga variabel.","title":"A. DEFINISI SISTEM PERSAMAAN LINIER"},{"location":"3.1%20Teori/#b-sistem-persamaan-linier-dua-variabel-spldv","text":"Sistem persamaan linear dua variabel ialah sistem persamaan linear yang terdiri dari dua persamaan dimana masing-masing persamaan memiliki dua variabel. Contoh SPLDV dengan variabel x dan y : $$\\begin{cases}ax+by=c\\\\ fx-gy=h\\end{cases}$$ dimana a,b,c,f,g dan h adalah bilangan-bilangan real. Penyelesaian SPLDV Tujuan penyelesaian ini untuk menentukan nilai yang memenuhi kedua persamaan yang ada pada SPLDV. Metode Penyelesaian :","title":"B. SISTEM PERSAMAAN LINIER DUA VARIABEL (SPLDV)"},{"location":"3.1%20Teori/#1metode-grafik","text":"Pada metode grafik ini, langkah-langkah yang dilakukan pertama adalah menentukan grafik garis dari masing-masing persamaan kemudian menentukan titik potong dari kedua garis. Titik potong dari kedua garis tersebut adalah penyelesaian dari SPLDV. Pada metode grafik ini, terdapat beberapa jenis himpunan penyelesaian berdasarkan grafik persamaan, yaitu: 1.Apabila kedua garis berpotongan, maka perpotonga kedua garis adalah penyelesaian dari SPLDV dan memiliki satu penyelesaian. 2.Apabila kedua garis sejajar, maka SPLDV tidak memiliki penyelesaian. 3.Apabila kedua garis saling berhimpit, maka SPLDV memiliki tak berhingga himpunan penyelesaian.","title":"1.Metode grafik"},{"location":"3.1%20Teori/#2metode-eliminasi","text":"Pada metode eliminasi ini, menentukan penyelesaian dari variabel x dengan cara mengeliminasi variabel y, dan untuk menentukan penyelesaian variabel y dengan cara mengeliminasi variabel x.","title":"2.Metode eliminasi"},{"location":"3.1%20Teori/#3metode-substitusi","text":"Pada metode substitusi, langkah pertama yang dilakukan adalah mengubah salah satu persamaan menjadi persamaan fungsi, yaitu x sebagai fungsi dari y atau y sebagai fungsi dari x. Kemudian subtitusikan x atau y pada persamaan yang lain.","title":"3.Metode substitusi"},{"location":"3.1%20Teori/#4metode-eliminasi-subtitusi","text":"Metode ini adalah gabungan dari metode eliminasi dan subtitusi. Pertama eliminasi salah satu variabel, kemudian penyelesaian dari variabel yang diperoleh disubtitusikan pada salah satu persamaan.","title":"4.Metode eliminasi-subtitusi"},{"location":"3.1%20Teori/#c-sistem-persamaan-linier-tiga-variabel-spltv","text":"Sistem persamaan linear tiga variabel adalah sistem persamaan yang terdiri dari tiga persamaan dimana masing-masing persamaan memiliki tiga variabel. Contoh SPLTV dengan variabel x,y, dan z: $$\\begin{cases}a_{1}x_{1}+b_{1}y_{1}+c_{1}z_{1}=d_{1}\\\\ a_{2}x_{2}+b_{2}y_{2}+c_{2}z_{2}=d_{2}\\\\ a_{3}x_{3}+b_{3}y_{3}+c_{3}z_{3}=d_{3}\\end{cases}$$ dimana a, b, c dan d adalah bilangan-bilangan real. Pada SPLTV terdapat 2 cara penyelesaian, yaitu :","title":"C. SISTEM PERSAMAAN LINIER TIGA VARIABEL (SPLTV)"},{"location":"3.1%20Teori/#1metode-subtitusi","text":"1.Ubah salah satu persamaan yang ada pada sistem dan nyatakan x sebagai fungsi dari y dan z, atau y sebagai fungsi dari x dan z, atau z sebagai fungsi dari x dan y. 2.Subtitusikan fungsi x atau y atau z dari langkah pertama pada dua persamaan yang lain, sehingga diperoleh SPLDV. 3.Selesaikan SPLDV yang diperoleh dengan metode yang dibahas pada penyelesaian SPLDV di atas.","title":"1.Metode Subtitusi"},{"location":"3.1%20Teori/#2metode-eliminasi_1","text":"1.Eliminasi salah satu variabel sehingga diperoleh SPLDV 2.Selesaikan SPLDV yang diperoleh dengan langkah seperti pada penyelesaian SPLDV yang telah dibahas 3.Subtitusikan variabel yang telah diperoleh pada persamaan yang ada.","title":"2.Metode Eliminasi"},{"location":"3.2%20Algoritma/","text":"A. Eliminasi Gauss Eliminasi Gauss merupakan suatu metode untuk mengoperasikan nilai-nilai persamaan linier di dalam matriks sehingga menjadi matriks yang lebih sederhana lagi. Algoritma Eliminasi Gauss : 1.Ubah bentuk persamaan tersebut ke dalam bentuk matriks. 2.Operasikan matriksnya menggunakan metode eliminasi perbaris. 3.Setelah mendapatkan persamaan linier baru, lakukan substitusi balik. 4.Hitunglah nilai x, y dan z nya. Kelebihan dan Kelemahan Keuntungan : 1.Dapat menentukan suatu sistem konsisten atau tidak. 2.Menghilangkan kebutuhan untuk menulis ulang variabel setiap langkah. 3.Lebih mudah dalam memecahkan suatu permasalahan. Kelemahan : 1.Terdapat masalah dalam akurasi hasil hitung saat pembulatan desimal B. Eliminasi Gauss-Jordan Eliminasi Gauss-Jordan adalah pengembangan dari metode eliminasi Gauss yang hasilnya lebih sederhana. Caranya yaitu dengan meneruskan operasi hitung baris dari eliminasi Gauss sehingga menghasilkan matriks yang Eselon-baris. Hal ini dapat digunakan sebagai metode penyelesaian persamaan linear dengan menggunakan matriks. Algoritma Metode Eliminasi Gauss-Jordan : 1.Ubah bentuk persamaan tersebut ke dalam bentuk matriks. 2.Masukkan matrik A, dan vektor B beserta ukurannya n. 3.Buatlah suatu augmented matrik [A|B] namakan dengan A. 4.Pada baris ke i dimana i=1 s/d n, perhatikan apakah nilai ai,i =0 : Apabila ya : Pertukarkan baris ke i dan baris ke i+k\u2264n, dimana ai+k ,i \u22600, apabila tidak ada berarti perhitungan tidak bisa dilanjutkan dan proses dihentikan dengan tanpa penyelesaian. Apabila tidak : lanjutkan proses. 5.Untuk baris ke j, dimana j = i+1 s/d n. Kelebihan dan Kelemahan Mengubah sistem persamaan linier yang ingin dihitung menjadi matriks augmentasi. Merupakan salah satu variasi dari eliminasi gauss dengan kebutuhan dapat menyelesaikan matriks invers. C. Eliminasi Gauss-Seidel Metode interasi Gauss-Seidel adalah metode yang menggunakan proses iterasi hingga diperoleh nilai-nilai yang berubah-ubah. Metode iterasi Gauss-Seidel dikembangkan dari gagasan metode iterasi pada solusi persamaan tak linier. Rumus dari metode eliminasi Gauss-Seidel : $$xi_{aii}^{\\left( k\\right) }=1 b_{i}-\\sum a_{ii}x_{j}^\\left( k\\right) -\\sum a_{ii}x_{j}^{\\left( k-1\\right) }$$ Algoritma Metode Eliminasi Gauss-Seidel : 1.Pecahkan nilai persamaan menjadi x1,x2,x3,x4. 2.Hitunglah nilai pendekatan awal (0,0,0,0). 3.Lakukan iterasi sebanyak n. Kelebihan dan Kelemahan Keuntungan : Metode eliminasi gauss-seidel digunakan untuk menyelesaikan SPL yg berukuran kecil karena metode ini lebih efisien. Dengan metode iterasi Gauss-Seidel pembulatan dapat diperkecil karena dapat meneruskan iterasi sampai solusinya seteliti mungkin sesuai dengan batas sesatan yang diperbolehkan. Kelemahan : Kelemahan dari metode ini adalah masalah pivot (titik tengah) yang harus benar\u2013benar diperhatikan, karena penyusun yang salah akan menyebabkan iterasi menjadi divergen dan tidak diperoleh hasil yang benar. C. Eliminasi Jacobi Metode Jacobi merupakan salah satu metode / cara untuk menyelesaikan solusi sistem persamaan linear. Metode Jacobi adalah metode konvergen. Sehingga setiap persamaan harus diubah sedemikian hingga koefisien-koefisien nilai mutlaknya paling besar satu Iterasi Jacobi memiliki rumus persamaan sebagai berikut : $$x_{i}=\\dfrac{b_{i-\\sum i\\neq j}a_{ij}x_{j}}{a_{ii}}$$ Algoritma Metode Eliminasi Jacobi 1.Nyatakan setiap variabel dalam ketiga variabel yang lainnya. 2.Hitunglah nilai pendekatan awal (0,0,0,0). 3.Lakukan iterasi sebanyak n. Kelebihan dan Kelemahan Keuntungan : 1.Menyelesaikan persamaan linear berukuran besar dan proporsi koefisien nolnya besar. 2.Hasil hitung memiliki tingkat akurasi yang tinggi Kelemahan : Harus benar\u2013benar memperhatikan masalah pivot (titik tengah), karena akan menyebabkan iterasi menjadi divergen dan tidak diperoleh hasil yang benar / valid.","title":"3.2 Algoritma"},{"location":"3.2%20Algoritma/#a-eliminasi-gauss","text":"Eliminasi Gauss merupakan suatu metode untuk mengoperasikan nilai-nilai persamaan linier di dalam matriks sehingga menjadi matriks yang lebih sederhana lagi. Algoritma Eliminasi Gauss : 1.Ubah bentuk persamaan tersebut ke dalam bentuk matriks. 2.Operasikan matriksnya menggunakan metode eliminasi perbaris. 3.Setelah mendapatkan persamaan linier baru, lakukan substitusi balik. 4.Hitunglah nilai x, y dan z nya.","title":"A. Eliminasi Gauss"},{"location":"3.2%20Algoritma/#kelebihan-dan-kelemahan","text":"Keuntungan : 1.Dapat menentukan suatu sistem konsisten atau tidak. 2.Menghilangkan kebutuhan untuk menulis ulang variabel setiap langkah. 3.Lebih mudah dalam memecahkan suatu permasalahan. Kelemahan : 1.Terdapat masalah dalam akurasi hasil hitung saat pembulatan desimal","title":"Kelebihan dan Kelemahan"},{"location":"3.2%20Algoritma/#b-eliminasi-gauss-jordan","text":"Eliminasi Gauss-Jordan adalah pengembangan dari metode eliminasi Gauss yang hasilnya lebih sederhana. Caranya yaitu dengan meneruskan operasi hitung baris dari eliminasi Gauss sehingga menghasilkan matriks yang Eselon-baris. Hal ini dapat digunakan sebagai metode penyelesaian persamaan linear dengan menggunakan matriks. Algoritma Metode Eliminasi Gauss-Jordan : 1.Ubah bentuk persamaan tersebut ke dalam bentuk matriks. 2.Masukkan matrik A, dan vektor B beserta ukurannya n. 3.Buatlah suatu augmented matrik [A|B] namakan dengan A. 4.Pada baris ke i dimana i=1 s/d n, perhatikan apakah nilai ai,i =0 : Apabila ya : Pertukarkan baris ke i dan baris ke i+k\u2264n, dimana ai+k ,i \u22600, apabila tidak ada berarti perhitungan tidak bisa dilanjutkan dan proses dihentikan dengan tanpa penyelesaian. Apabila tidak : lanjutkan proses. 5.Untuk baris ke j, dimana j = i+1 s/d n.","title":"B. Eliminasi Gauss-Jordan"},{"location":"3.2%20Algoritma/#kelebihan-dan-kelemahan_1","text":"Mengubah sistem persamaan linier yang ingin dihitung menjadi matriks augmentasi. Merupakan salah satu variasi dari eliminasi gauss dengan kebutuhan dapat menyelesaikan matriks invers.","title":"Kelebihan dan Kelemahan"},{"location":"3.2%20Algoritma/#c-eliminasi-gauss-seidel","text":"Metode interasi Gauss-Seidel adalah metode yang menggunakan proses iterasi hingga diperoleh nilai-nilai yang berubah-ubah. Metode iterasi Gauss-Seidel dikembangkan dari gagasan metode iterasi pada solusi persamaan tak linier. Rumus dari metode eliminasi Gauss-Seidel : $$xi_{aii}^{\\left( k\\right) }=1 b_{i}-\\sum a_{ii}x_{j}^\\left( k\\right) -\\sum a_{ii}x_{j}^{\\left( k-1\\right) }$$ Algoritma Metode Eliminasi Gauss-Seidel : 1.Pecahkan nilai persamaan menjadi x1,x2,x3,x4. 2.Hitunglah nilai pendekatan awal (0,0,0,0). 3.Lakukan iterasi sebanyak n.","title":"C. Eliminasi Gauss-Seidel"},{"location":"3.2%20Algoritma/#kelebihan-dan-kelemahan_2","text":"Keuntungan : Metode eliminasi gauss-seidel digunakan untuk menyelesaikan SPL yg berukuran kecil karena metode ini lebih efisien. Dengan metode iterasi Gauss-Seidel pembulatan dapat diperkecil karena dapat meneruskan iterasi sampai solusinya seteliti mungkin sesuai dengan batas sesatan yang diperbolehkan. Kelemahan : Kelemahan dari metode ini adalah masalah pivot (titik tengah) yang harus benar\u2013benar diperhatikan, karena penyusun yang salah akan menyebabkan iterasi menjadi divergen dan tidak diperoleh hasil yang benar.","title":"Kelebihan dan Kelemahan"},{"location":"3.2%20Algoritma/#c-eliminasi-jacobi","text":"Metode Jacobi merupakan salah satu metode / cara untuk menyelesaikan solusi sistem persamaan linear. Metode Jacobi adalah metode konvergen. Sehingga setiap persamaan harus diubah sedemikian hingga koefisien-koefisien nilai mutlaknya paling besar satu Iterasi Jacobi memiliki rumus persamaan sebagai berikut : $$x_{i}=\\dfrac{b_{i-\\sum i\\neq j}a_{ij}x_{j}}{a_{ii}}$$ Algoritma Metode Eliminasi Jacobi 1.Nyatakan setiap variabel dalam ketiga variabel yang lainnya. 2.Hitunglah nilai pendekatan awal (0,0,0,0). 3.Lakukan iterasi sebanyak n.","title":"C. Eliminasi Jacobi"},{"location":"3.2%20Algoritma/#kelebihan-dan-kelemahan_3","text":"Keuntungan : 1.Menyelesaikan persamaan linear berukuran besar dan proporsi koefisien nolnya besar. 2.Hasil hitung memiliki tingkat akurasi yang tinggi Kelemahan : Harus benar\u2013benar memperhatikan masalah pivot (titik tengah), karena akan menyebabkan iterasi menjadi divergen dan tidak diperoleh hasil yang benar / valid.","title":"Kelebihan dan Kelemahan"},{"location":"3.3%20Coding/","text":"Program Python Sistem Persamaan Linier Cara penyelesaian sistem persamaan berikut : 25x + 5y + z = 106.2 64x + 8y + z = 177.2 144x + 12y + z = 279.2 Eliminasi Gauss #Eliminasi Gauss import numpy A = numpy.array([[25, 5, 1, 106.2], [64, 8, 1, 177.2], [144, 12, 1, 279.2]]) print(A) n = len(A) x = numpy.zeros(n) for k in range(n): for i in range(k+1,n): if A[i][k] == 0: continue factor = A[i][k]/A[k][k] #print(factor) for j in range(k,n+1): A[i][j] = A[i][j] - (A[k][j] * factor) print(A) x[n-1] = A[n-1][n]/A[n-1][n-1] #baris terakhir dihitung sendiri #jadi tinggal x[0], x[1], x[2] for i in range(n-2,-1,-1): sum_el = 0 for j in range (i+1,n): sum_el = sum_el + (A[i][j] * x[j]) x[i] = (A[i][n] - sum_el)/A[i][i] print(x) Eliminasi Gauss Jordan #Eliminasi Gauss Jordan import numpy A = numpy.array([[25, 5, 1, 106.2], [64, 8, 1, 177.2], [144, 12, 1, 279.2]]) print(A) n = len(A) x = numpy.zeros(n) for k in range(n): pivot = A[k][k] A[k] = A[k]/pivot #print(A) for i in range(n): if i == k: continue factor = A[i][k] for j in range(k,n+1): A[i][j] = A[i][j] - factor * A[k][j] print(A) x = A[:,n] print(x) Eliminasi Jacobi #Metode Jacobi import numpy def fjacobi(A,xzero): baris = numpy.size(A,0) xi = [] xkira = [] xminus = xzero[:] for j in range(baris): xi = (A[j,:]/A[j][j]) sumel = xi[baris] for k in range(baris): if k == j: continue sumel = sumel - (xi[k] * xzero[k]) xkira.append(sumel) xzero = xkira delta = numpy.subtract(xzero, xminus) ea = abs(numpy.divide(delta,xzero) * 100) return [xzero, ea] matrix1 = numpy.array([[5, -2, 3, -1], [-3, 9, 1, 2], [2, -1, -7, 3]]) print(matrix1) xzero = [1, 2, 5] ea = [2.0, 2, 2] print(\"JAWABAN\") n = 0 while all(i > 0.01 for i in ea): [xzero,ea] = fjacobi(matrix1,xzero) n += 1 print(\"Nilai x1 x2 x3 untuk metode Jacobi =\") print(xzero) print(\"Error = \", ea, \" pada iterasi ke \", n) Metode Eliminasi Gauss Seidel #Metode Gauss Seidel import numpy def fseidel(A,xzero): baris = numpy.size(A,0) xi = [] xminus = xzero[:] for j in range(baris): xi = (A[j,:]/A[j][j]) sumel = xi[baris] for k in range(baris): if k == j: continue sumel = sumel - (xi[k] * xzero[k]) xzero[j] = sumel delta = numpy.subtract(xzero,xminus) ea = abs(numpy.divide(delta,xzero) * 100) return [xzero, ea] matrix1 = numpy.array([[5, -2, 3, -1], [-3, 9, 1, 2], [2, -1, -7, 3]]) print(matrix1) xzero = [1, 2, 5] ea = [2.0, 2, 2] print(\"JAWABAN\") n = 0 while all(i > 0.01 for i in ea): [xzero,ea] = fseidel(matrix1,xzero) n += 1 print(\"Nilai x1 x2 x3 untuk metode Gauss Seidel =\") print(xzero) print(\"Error = \", ea, \" pada iterasi ke \", n)","title":"3.3 Coding"},{"location":"3.3%20Coding/#program-python-sistem-persamaan-linier","text":"Cara penyelesaian sistem persamaan berikut : 25x + 5y + z = 106.2 64x + 8y + z = 177.2 144x + 12y + z = 279.2 Eliminasi Gauss #Eliminasi Gauss import numpy A = numpy.array([[25, 5, 1, 106.2], [64, 8, 1, 177.2], [144, 12, 1, 279.2]]) print(A) n = len(A) x = numpy.zeros(n) for k in range(n): for i in range(k+1,n): if A[i][k] == 0: continue factor = A[i][k]/A[k][k] #print(factor) for j in range(k,n+1): A[i][j] = A[i][j] - (A[k][j] * factor) print(A) x[n-1] = A[n-1][n]/A[n-1][n-1] #baris terakhir dihitung sendiri #jadi tinggal x[0], x[1], x[2] for i in range(n-2,-1,-1): sum_el = 0 for j in range (i+1,n): sum_el = sum_el + (A[i][j] * x[j]) x[i] = (A[i][n] - sum_el)/A[i][i] print(x) Eliminasi Gauss Jordan #Eliminasi Gauss Jordan import numpy A = numpy.array([[25, 5, 1, 106.2], [64, 8, 1, 177.2], [144, 12, 1, 279.2]]) print(A) n = len(A) x = numpy.zeros(n) for k in range(n): pivot = A[k][k] A[k] = A[k]/pivot #print(A) for i in range(n): if i == k: continue factor = A[i][k] for j in range(k,n+1): A[i][j] = A[i][j] - factor * A[k][j] print(A) x = A[:,n] print(x) Eliminasi Jacobi #Metode Jacobi import numpy def fjacobi(A,xzero): baris = numpy.size(A,0) xi = [] xkira = [] xminus = xzero[:] for j in range(baris): xi = (A[j,:]/A[j][j]) sumel = xi[baris] for k in range(baris): if k == j: continue sumel = sumel - (xi[k] * xzero[k]) xkira.append(sumel) xzero = xkira delta = numpy.subtract(xzero, xminus) ea = abs(numpy.divide(delta,xzero) * 100) return [xzero, ea] matrix1 = numpy.array([[5, -2, 3, -1], [-3, 9, 1, 2], [2, -1, -7, 3]]) print(matrix1) xzero = [1, 2, 5] ea = [2.0, 2, 2] print(\"JAWABAN\") n = 0 while all(i > 0.01 for i in ea): [xzero,ea] = fjacobi(matrix1,xzero) n += 1 print(\"Nilai x1 x2 x3 untuk metode Jacobi =\") print(xzero) print(\"Error = \", ea, \" pada iterasi ke \", n) Metode Eliminasi Gauss Seidel #Metode Gauss Seidel import numpy def fseidel(A,xzero): baris = numpy.size(A,0) xi = [] xminus = xzero[:] for j in range(baris): xi = (A[j,:]/A[j][j]) sumel = xi[baris] for k in range(baris): if k == j: continue sumel = sumel - (xi[k] * xzero[k]) xzero[j] = sumel delta = numpy.subtract(xzero,xminus) ea = abs(numpy.divide(delta,xzero) * 100) return [xzero, ea] matrix1 = numpy.array([[5, -2, 3, -1], [-3, 9, 1, 2], [2, -1, -7, 3]]) print(matrix1) xzero = [1, 2, 5] ea = [2.0, 2, 2] print(\"JAWABAN\") n = 0 while all(i > 0.01 for i in ea): [xzero,ea] = fseidel(matrix1,xzero) n += 1 print(\"Nilai x1 x2 x3 untuk metode Gauss Seidel =\") print(xzero) print(\"Error = \", ea, \" pada iterasi ke \", n)","title":"Program Python Sistem Persamaan Linier"}]}